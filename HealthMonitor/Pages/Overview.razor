@using Days;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using RadzenBlazorDemos;
@inject DialogService DialogService;

@page "/"

<h1>Overview and Statistics</h1>
<br/>
<RadzenAccordion>
    <Items>
        <RadzenAccordionItem Text="You had a headache on the following days:" Icon="accessibility">
            <ul>
                @foreach (var day in daysWithHeadache)
                {
                    if(day.Headache>0){
                    <li>
                        @day.Date.ToString("dd. MMM, yyyy")
                        <br>                                   
                        Intensity of headache: @day.Headache
                        <br>                                   
                    </li>        
                    }
                }
            </ul>
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="The following potential triggers could be identified:" Icon="accessibility">
            <ul>
                @foreach (var item in @printResults())
                {
                        @item
                        <br>                                   
                }  
            </ul>  
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="drug usage" Icon="accessibility">
            <p>On @daysWithMedicament.Count days you took the following drugs</p>
            <ul>
                @foreach (var day in daysWithMedicament)
                {
                    <li>
                        @day.Drug
                        <br>                                   
                    </li>
                }
            </ul>
        </RadzenAccordionItem>
    </Items>
</RadzenAccordion>
<br/>
<RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="Headache" Data=@daysWithHeadacheList StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="1">
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    private Day today = new() {};
    private List<Day> daysFromDisk = new();
    private List<Day> daysWithHeadache = new();
    private List<Day> daysBeforeHeadache = new();
    private List<Day> daysWithBadSleep = new();
    private List<Day> daysWithSport = new();
    private List<Day> daysWithSex = new();
    private List<Day> daysWithAlcohol = new();
    private List<Day> daysWithMedicament = new();
    private Day previousDay = new() {};

    RadzenScheduler<Headache> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Headache> daysWithHeadacheList = new List<Headache>{};

    Persistence.LoadFromFile getFiles = new Persistence.LoadFromFile();

    protected override void OnInitialized()
    {
        daysFromDisk = getFiles.ObjectsFromFile();
        today.Date = DateTime.Now;

        foreach(Day day in daysFromDisk){
            if( day.Headache > 0 ) {
                daysWithHeadache.Add(day);
                if(previousDay != null){
                    daysBeforeHeadache.Add(previousDay);
                }
            }
            previousDay = day;
        }

        foreach(Day day in daysWithHeadache){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }
        foreach(Day day in daysWithHeadache){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }        
        foreach(Day day in daysBeforeHeadache){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }        

        foreach(Day day in daysWithHeadache){
            if( day.Sport > 2 ) {
                daysWithSport.Add(day);                 
            }
        }                  
        foreach(Day day in daysWithHeadache){
            if( day.Sex > 0 ) {
                daysWithSex.Add(day);                   
            }
        } 
        foreach(Day day in daysBeforeHeadache){
            if( day.Sex > 0 ) {
                daysWithSex.Add(day);                   
            }
        }                           
        foreach(Day day in daysWithHeadache){
            if( day.Alcohol > 1 ) {
                daysWithAlcohol.Add(day);                   
            }
        }                  
        foreach(Day day in daysWithHeadache){
            if( day.Drug != null ) {
                daysWithMedicament.Add(day);                   
            }
        }

        foreach(Day day in daysWithHeadache){
            daysWithHeadacheList.Add(
                new Headache { Start = day.Date, End = day.Date, Text = "Headache" }
            );
        }

    }
    protected List<string> printResults()
    {
        List<string> items = new List<string>
        {
            "You had a bad sleep on " + daysWithBadSleep.Count + " days",
            "You did sport on " + daysWithSport.Count + " days",
            "You were sexual active on " + daysWithSex.Count + " days",
            "You drank alcohol on " + daysWithAlcohol.Count + " days",
        };

        // Use regular expression to extract the count numbers
        var regex = new Regex(@"on (\d+) days");
        var sortedItems = items.OrderByDescending(item => int.Parse(regex.Match(item).Groups[1].Value)).ToList();
        return sortedItems;
    }
}
