@using Days;
@using FileManagement;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using RadzenBlazorDemos;
@using HealthMonitor.Components;

@inject DialogService DialogService;

@page "/"

<h1>Overview and Statistics</h1>

<br/>

<RadzenAccordion>
    <Items>
        <RadzenAccordionItem Text="The average airpressure on days with low health was:" Icon="accessibility">
            @getAverageAirpressure()
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="The following potential triggers could be identified:" Icon="accessibility">
            <ul>
                @foreach (var item in @printResultList())
                {
                        @item
                        <br>                                   
                }  
            </ul>  
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="drug usage" Icon="accessibility">
            <p>On @daysWithDrugUsage.Count days you took the following drugs</p>
            <ul>
                @foreach (var day in daysWithDrugUsage)
                {
                    <li>
                        @day.Drug
                        <br>                                   
                    </li>
                }
            </ul>
        </RadzenAccordionItem>  
        <HealthMonitor.Components.FoodSection daysWithFood="daysWithFood" />   
    </Items>
</RadzenAccordion>

<br/>

<RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="DailyHealthStatus" Data=@daysWithLowHealthList StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="1">
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    private List<Day> allDays = new();
    private List<Day> daysWithLowHealth = new();
    private List<Day> daysBeforeLowHealth = new();
    private List<Day> daysWithBadSleep = new();
    private List<Day> daysWithSport = new();
    private List<Day> daysWithSex = new();
    private List<Day> daysWithAlcohol = new();
    private List<Day> daysWithDrugUsage = new();
    private List<Day> daysWithFood = new();
    private Day previousDay = new() {};

    RadzenScheduler<DailyHealthStatus>? scheduler;

    IList<DailyHealthStatus> daysWithLowHealthList = new List<DailyHealthStatus>{};

    FileLoaderService fileLoaderService = new FileLoaderService();

    public Overview()
    {
        allDays = fileLoaderService.LoadAllDays();

        foreach(Day day in allDays){
            if( day.HealthStatus < 5 ) {
                daysWithLowHealth.Add(day);
                if(previousDay != null){
                    daysBeforeLowHealth.Add(previousDay);
                }
            }
            previousDay = day;
        }

        Func<Day, bool> isBadSleepCondition = day => day.QualityOfSleep < 5;
        Func<Day, bool> isSexCondition = day => day.Sex > 0;
        Func<Day, bool> isSportCondition = day => day.Sport > 0;            
        Func<Day, bool> isAlcoholCondition = day => day.Alcohol < 5;
        Func<Day, bool> isDrugCondition = day => day.Drug != null;
        Func<Day, bool> isFoodCondition = day => day.Food != null;


        daysWithBadSleep = FilterDaysWithProperty(daysWithLowHealth, isBadSleepCondition);
        daysWithBadSleep.AddRange(daysBeforeLowHealth.Where(isBadSleepCondition));

        daysWithSport = FilterDaysWithProperty(daysWithLowHealth, isSportCondition);  
        daysWithSport.AddRange(daysBeforeLowHealth.Where(isSportCondition)); 

        daysWithSex = FilterDaysWithProperty(daysWithLowHealth, isSexCondition);  
        daysWithSex.AddRange(daysBeforeLowHealth.Where(isSexCondition)); 
 
        daysWithAlcohol = FilterDaysWithProperty(daysWithLowHealth, isAlcoholCondition); 
        daysWithAlcohol.AddRange(daysBeforeLowHealth.Where(isAlcoholCondition)); 

        daysWithDrugUsage = FilterDaysWithProperty(daysWithLowHealth, isDrugCondition); 
        daysWithDrugUsage.AddRange(daysBeforeLowHealth.Where(isDrugCondition)); 

        daysWithFood = FilterDaysWithProperty(daysWithLowHealth, isFoodCondition); 
        daysWithFood.AddRange(daysBeforeLowHealth.Where(isFoodCondition)); 

        foreach(Day day in daysWithLowHealth){
            daysWithLowHealthList.Add(
                new DailyHealthStatus { Start = day.Date, End = day.Date, Text = "Low health: " + day.HealthStatus }
            );
        }

    }

    private List<Day> FilterDaysWithProperty(List<Day> sourceDays, Func<Day, bool> filter)
    {
        return sourceDays.Where(filter).ToList();
    }
    protected List<string> printResultList()
    {
        List<string> items = new List<string>
        {
            "You had a bad sleep on " + daysWithBadSleep.Count + " days with low health",
            "You did sport on " + daysWithSport.Count + " days with low health",
            "You were sexual active on " + daysWithSex.Count + " days with low health",
            "You drank alcohol on " + daysWithAlcohol.Count + " days with low health",
        };

        // Use regular expression to extract the count numbers
        var regex = new Regex(@"on (\d+) days");
        var sortedItems = items.OrderByDescending(item => int.Parse(regex.Match(item).Groups[1].Value)).ToList();
        return sortedItems;
    }

    protected int getAverageAirpressure()
    {
        int sumAirpressure = 0;

        foreach(Day day in daysWithLowHealth){
            sumAirpressure = sumAirpressure + day.AirPressure; 
        }
        return sumAirpressure / daysWithLowHealth.Count;
    }    
}
