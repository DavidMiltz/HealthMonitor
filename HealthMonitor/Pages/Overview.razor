@using Controllers;
@using HealthMonitor.Components;
@using RadzenBlazorDemos;
@using Days;

@inject DialogService DialogService;

@page "/overview"

<h1 style="color: @color;">Overview and Statistics</h1>

<br/>
<RadzenAccordion>
    <Items>
        <RadzenAccordionItem Text="Days with Bad health in the last 30 days:" Icon="accessibility">
            @daysController.GetDaysWithIn30Days().Count days with health below average.
        </RadzenAccordionItem>           
        <HealthMonitor.Components.AirpressureSection daysWithLowHealth="@daysController.GetDaysWithLowHealth()" />
        <RadzenAccordionItem Text="The following potential triggers could be identified:" Icon="accessibility">
            <ul>
                @foreach (var item in @daysController.printPotentialTriggers())
                {
                        @item
                        <br>                                   
                }  
            </ul>  
        </RadzenAccordionItem>          
        <HealthMonitor.Components.DrugSection daysWithDrugUsage="@daysWithDrugUsage" daysSinceLAstPainkiller="daysController.DaysSinceLastPainkiller(DateTime.Today)" />  
        <HealthMonitor.Components.FoodSection daysWithFood="@daysWithFood" />   
    </Items>
</RadzenAccordion>

<br/>

<RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="DailyHealthStatus" Data="@daysController.GetDaysWithLowHealthForScheduler()" StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="1">
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    private DaysController daysController = new DaysController();    
    private RadzenScheduler<DailyHealthStatus>? scheduler;
    private DateTime thirtyDaysAgo = DateTime.Now.AddDays(-30);        
    private Func<Day, bool> isFoodCondition = day => day.Food != null;
    private Func<Day, bool> isDrugCondition;     
    private List<Day> daysWithFood;
    private List<Day> daysWithDrugUsage;
    private string color = "#4340D2";        

    public Overview()
    {
        isDrugCondition = day => day.Drug != null && (thirtyDaysAgo - day.Date).TotalDays <= 0;
        daysWithFood = daysController.GetDaysWithAttribute(isFoodCondition);        
        daysWithDrugUsage = daysController.GetDaysWithAttribute(isDrugCondition);        
    }    
}
