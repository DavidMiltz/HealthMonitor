@using Days;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using RadzenBlazorDemos;
@inject DialogService DialogService;

@page "/"

<h1>Overview</h1>

<p>An folgenden Tagen hatten Sie Kopfschmerzen:</p>
<ul>
    @foreach (var day in daysWithHeadache)
    {
        if(day.Headache>0){
        <li>
            @day.Date.ToString("dd. MMM, yyyy")
            <br>                                   
            Kopfschmerzintensität: @day.Headache
            <br>                                   
        </li>        
        }
    }
</ul>

<p>Folgende potentielle Kopfschmerztrigger konnten an den Tagen an den Sie Kopfschmerzen hatten oder den Tagen direkt davor identifiziert werden:</p>
<ul>
    @foreach (var item in @printResults())
    {
            @item
            <br>                                   
    }  
</ul>  

<p>An @daysWithMedicament.Count Tagen haben sie Medikamente genommen</p>
<ul>
    @foreach (var day in daysWithMedicament)
    {
        <li>
            @day.Drug
            <br>                                   
        </li>
    }
</ul>
<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="1"
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenMonthView />
    <RadzenYearPlannerView />
</RadzenScheduler>

@code {
    private Day today = new() {};
    private List<Day> daysFromDisk = new();
    private List<Day> daysWithHeadache = new();
    private List<Day> daysBeforeHeadache = new();
    private List<Day> daysWithBadSleep = new();
    private List<Day> daysWithSport = new();
    private List<Day> daysWithSex = new();
    private List<Day> daysWithAlcohol = new();
    private List<Day> daysWithMedicament = new();
    private Day previousDay = new() {};

    RadzenScheduler<Appointment> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        if (data != null)
        {
            appointments.Add(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    Persistence.LoadFromFile getFiles = new Persistence.LoadFromFile();

    protected override void OnInitialized()
    {
        daysFromDisk = getFiles.ObjectsFromFile();
        today.Date = DateTime.Now;

        foreach(Day day in daysFromDisk){
            if( day.Headache > 0 ) {
                daysWithHeadache.Add(day);
                if(previousDay != null){
                    daysBeforeHeadache.Add(previousDay);
                }
            }
            previousDay = day;
        }

        foreach(Day day in daysWithHeadache){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }
        foreach(Day day in daysWithHeadache){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }        
        foreach(Day day in daysBeforeHeadache){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }        

        foreach(Day day in daysWithHeadache){
            if( day.Sport > 2 ) {
                daysWithSport.Add(day);                 
            }
        }                  
        foreach(Day day in daysWithHeadache){
            if( day.Sex > 0 ) {
                daysWithSex.Add(day);                   
            }
        } 
        foreach(Day day in daysBeforeHeadache){
            if( day.Sex > 0 ) {
                daysWithSex.Add(day);                   
            }
        }                           
        foreach(Day day in daysWithHeadache){
            if( day.Alcohol > 1 ) {
                daysWithAlcohol.Add(day);                   
            }
        }                  
        foreach(Day day in daysWithHeadache){
            if( day.Drug != null ) {
                daysWithMedicament.Add(day);                   
            }
        }

    }
    protected List<string> printResults()
    {
        List<string> items = new List<string>
        {
            "An " + daysWithBadSleep.Count + " Tagen haben sie schlecht geschlafen",
            "An " + daysWithSport.Count + " Tagen haben sie Sport getrieben",
            "An " + daysWithSex.Count + " Tagen haben sie Sex gehabt",
            "An " + daysWithAlcohol.Count + " Tagen haben sie Alkohol getrunken",
        };

        // Use regular expression to extract the count numbers
        var regex = new Regex(@"An (\d+) Tagen");
        var sortedItems = items.OrderByDescending(item => int.Parse(regex.Match(item).Groups[1].Value)).ToList();
        return sortedItems;
    }
}
