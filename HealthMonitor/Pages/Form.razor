@using Days;
@using Controllers;
@using WeatherApi;
@inject IJSRuntime JSRuntime
@inject WeatherService weatherService;

@page "/day"
<h1 id="message" style="color: @color;">@message</h1>
<EditForm Model="@day" OnValidSubmit="@HandleValidSubmit" class="custom-form">
    <div class="form-group">    
        <label for="date" title="Enter the Date of the day you want to enter or update.">Date</label>
        <InputDate id="date" @bind-Value="day.Date" @oninput="@(e => LoadDay(e.Value?.ToString()))"/>
    </div>
    <div class="form-group">
        <label for="sleep" title="On a scale from 1 to 10: How well did you sleep?">How was your sleep?</label>
        <InputSelect id="sleep" @bind-Value="day.QualityOfSleep">
            @for (int x = 0; x <= 10; x++)
            {
                <option value="@x">@x</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">    
        <label for="sport" title="On a scale from 1 to 10: How much sport did you make?">How much sport did you do?</label>
        <InputSelect id="sport" @bind-Value="day.Sport">
            @for (int x = 0; x <= 10; x++)
            {
                <option value="@x">@x</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">       
        <label for="merkmal" title="On a scale from 1 to 10: How much merkmal did you have?">Merkmal activity?</label>
        <InputSelect id="merkmal" @bind-Value="day.Merkmal">
            @for (int x = 0; x <= 10; x++)
            {
                <option value="@x">@x</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">      
        <label for="alcohol" title="On a scale from 1 to 10: How much alcohol did you drink?">Did you drank alcohol?</label>
        <InputSelect id="alcohol" @bind-Value="day.Alcohol">
            @for (int x = 0; x <= 10; x++)
            {
                <option value="@x">@x</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">      
        <label for="healthStatus" title="On a scale from 1 to 10: How was you health this day?">How did you feel today? 5 is average</label>
        <InputSelect id="healthStatus" @bind-Value="day.HealthStatus">
            @for (int x = 0; x <= 10; x++)
            {
                <option value="@x">@x</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">      
        <label for="mentalStatus" title="On a scale from 1 to 10: How did you feel mentally today?">How did you feel today mentally? 5 is average</label>
        <InputSelect id="mentalStatus" @bind-Value="day.MentalStatus">
            @for (int x = 0; x <= 10; x++)
            {
                <option value="@x">@x</option>
            }
        </InputSelect>
    </div>    
    <div class="form-group">                              
        <label for="drugs" title="Enter any drugs you took this day.">Which drugs did you take?</label>
        <InputText @bind-Value="day.Drug" />
    </div>
    <div class="form-group">                              
        <label for="comment" title="Enter any special food you ate today.">Did you eat something special?</label>
        <InputText @bind-Value="day.Food" />
    </div>       
    <div class="form-group">                              
        <label for="comment" title="Enter any special events that happened today.">Make a comment.</label>
        <InputText @bind-Value="day.Comment" />
    </div>      
    <div class="form-group">                              
        <label for="city" title="Enter your city to fetch weather data for your location.">In which city do you live?</label>
        <InputText @bind-Value="day.City" />
    </div>    
    <button type="submit">Submit</button>
</EditForm>

@code {
    private Day day = new() {};
    DataController dataController = new DataController();
    private int airPressure;
    private double temp;
    private string message = "Enter your day.";
    private string color = "#4340D2";

    protected override async Task OnInitializedAsync()
    {
        day.Date = DateTime.Now;
        airPressure = 0;
        temp = 0;
        try
        {
            airPressure =  await weatherService.GetAirPressureAsync("Munich");
            temp =  await weatherService.GetTempAsync("Munich");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void HandleValidSubmit()
    {
        if (day is not null )
        {
            day.AirPressure = airPressure;
            day.Temp = (int)Math.Round(temp);
            if(dataController.SaveDay( day, day.Date, "DataBase\\" ))
            {
                color = "green";
                message = "Day saved";
            }else
            {
                color = "red";
                message = "Day not saved";                
            }
        }
    }
    private void LoadDay(string? selectedDate)
    {
        string formattedDate = "";
        string formattedDateForMessage = string.Empty;    
        if (DateTime.TryParse(selectedDate, out DateTime date))
        {
            formattedDate = date.ToString("yyyy-dd-M");
            formattedDateForMessage = date.ToString("dd.MMMM");
            color = "#4340D2";
            if (date.Date != DateTime.Today)
            {
                message = "Update " + formattedDateForMessage;
            }
            else
            {
                message = "Enter your day.";
            }
        }
        else
        {
            throw new ArgumentException("Invalid date string format.");
        }          
        Day loadedDay = dataController.LoadDay("DataBase\\", formattedDate);
        if (loadedDay != null)
        {
            day.QualityOfSleep = loadedDay.QualityOfSleep;
            day.Sport = loadedDay.Sport;
            day.Merkmal = loadedDay.Merkmal;
            day.Alcohol = loadedDay.Alcohol;
            day.HealthStatus = loadedDay.HealthStatus;
            day.MentalStatus = loadedDay.MentalStatus;
            day.Drug = loadedDay.Drug;
            day.Food = loadedDay.Food;
            day.Comment = loadedDay.Comment;
            day.City = loadedDay.City;
        }  
    }    
}
