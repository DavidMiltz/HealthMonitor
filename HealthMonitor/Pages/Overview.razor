@using Days;
@using FileManagement;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using RadzenBlazorDemos;
@inject DialogService DialogService;

@page "/"

<h1>Overview and Statistics</h1>
<br/>
<RadzenAccordion>
    <Items>
        <RadzenAccordionItem Text="The average airpressure on days with low health was:" Icon="accessibility">
            @getAverageAirpressure()
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="The following potential triggers could be identified:" Icon="accessibility">
            <ul>
                @foreach (var item in @printResultList())
                {
                        @item
                        <br>                                   
                }  
            </ul>  
        </RadzenAccordionItem>
        <RadzenAccordionItem Text="drug usage" Icon="accessibility">
            <p>On @daysWithDrugUsage.Count days you took the following drugs</p>
            <ul>
                @foreach (var day in daysWithDrugUsage)
                {
                    <li>
                        @day.Drug
                        <br>                                   
                    </li>
                }
            </ul>
        </RadzenAccordionItem>
        @if(@daysWithFood.Count > 0) {
            <RadzenAccordionItem Text="food" Icon="accessibility">
                <p>On @daysWithFood.Count days you ate:</p>
                <ul>
                    @foreach (var day in daysWithFood)
                    {
                        <li>
                            @day.Food
                            <br>                                   
                        </li>
                    }
                </ul>
            </RadzenAccordionItem> 
        }       
    </Items>
</RadzenAccordion>
<br/>
<RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="DailyHealthStatus" Data=@daysWithLowHealthList StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="1">
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    private Day today = new() {};
    private List<Day> daysFromDisk = new();
    private List<Day> daysWithLowHealth = new();
    private List<Day> daysBeforeLowHealth = new();
    private List<Day> daysWithBadSleep = new();
    private List<Day> daysWithSport = new();
    private List<Day> daysWithSex = new();
    private List<Day> daysWithAlcohol = new();
    private List<Day> daysWithDrugUsage = new();
    private List<Day> daysWithFood = new();
    private Day previousDay = new() {};

    RadzenScheduler<DailyHealthStatus>? scheduler;

    IList<DailyHealthStatus> daysWithLowHealthList = new List<DailyHealthStatus>{};

    FileLoaderService fileLoaderService = new FileLoaderService();

    protected override void OnInitialized()
    {
        daysFromDisk = fileLoaderService.LoadAllDays();
        today.Date = DateTime.Now;

        foreach(Day day in daysFromDisk){
            if( day.HealthStatus < 5 ) {
                daysWithLowHealth.Add(day);
                if(previousDay != null){
                    daysBeforeLowHealth.Add(previousDay);
                }
            }
            previousDay = day;
        }

        foreach(Day day in daysWithLowHealth){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }
        foreach(Day day in daysBeforeLowHealth){
            if( day.QualityOfSleep < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }  

        foreach(Day day in daysWithLowHealth){
            if( day.Sport < 5 ) {
                daysWithBadSleep.Add(day);             
            }
        }        
        foreach(Day day in daysBeforeLowHealth){
            if( day.Sport > 0 ) {
                daysWithSport.Add(day);                 
            }
        }     

        foreach(Day day in daysWithLowHealth){
            if( day.Sex > 0 ) {
                daysWithSex.Add(day);                   
            }
        } 
        foreach(Day day in daysBeforeLowHealth){
            if( day.Sex > 0 ) {
                daysWithSex.Add(day);                   
            }
        }   

        foreach(Day day in daysWithLowHealth){
            if( day.Alcohol > 0 ) {
                daysWithAlcohol.Add(day);                   
            }
        } 
        foreach(Day day in daysBeforeLowHealth){
            if( day.Alcohol > 0 ) {
                daysWithAlcohol.Add(day);                   
            }
        }   

        foreach(Day day in daysWithLowHealth){
            if( day.Drug != null ) {
                daysWithDrugUsage.Add(day);                   
            }
        }
        foreach(Day day in daysBeforeLowHealth){
            if( day.Drug != null ) {
                daysWithDrugUsage.Add(day);                   
            }  
        } 
        foreach(Day day in daysWithLowHealth){
            if( day.Food != null ) {
                daysWithFood.Add(day);                   
            }
        }
        foreach(Day day in daysBeforeLowHealth){
            if( day.Food != null ) {
                daysWithFood.Add(day);                   
            }               
        }
        foreach(Day day in daysWithLowHealth){
            daysWithLowHealthList.Add(
                new DailyHealthStatus { Start = day.Date, End = day.Date, Text = "Low health: " + day.HealthStatus }
            );
        }

    }
    protected List<string> printResultList()
    {
        List<string> items = new List<string>
        {
            "You had a bad sleep on " + daysWithBadSleep.Count + " days with low health",
            "You did sport on " + daysWithSport.Count + " days with low health",
            "You were sexual active on " + daysWithSex.Count + " days with low health",
            "You drank alcohol on " + daysWithAlcohol.Count + " days with low health",
        };

        // Use regular expression to extract the count numbers
        var regex = new Regex(@"on (\d+) days");
        var sortedItems = items.OrderByDescending(item => int.Parse(regex.Match(item).Groups[1].Value)).ToList();
        return sortedItems;
    }

    protected int getAverageAirpressure()
    {
        int sumAirpressure = 0;

        foreach(Day day in daysWithLowHealth){
            sumAirpressure = sumAirpressure + day.AirPressure; 
        }
        return sumAirpressure / daysWithLowHealth.Count;
    }    
}
